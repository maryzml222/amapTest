package com.example.lib_db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lib_db.model.TransLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANS_LOG".
*/
public class TransLogDao extends AbstractDao<TransLog, Long> {

    public static final String TABLENAME = "TRANS_LOG";

    /**
     * Properties of entity TransLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PhoneNumber = new Property(1, String.class, "phoneNumber", false, "phoneNumber");
        public final static Property RouteStatusCode = new Property(2, String.class, "routeStatusCode", false, "routeStatusCode");
        public final static Property RouteStatusDesc = new Property(3, String.class, "routeStatusDesc", false, "routeStatusDesc");
        public final static Property CreateTime = new Property(4, String.class, "createTime", false, "createTime");
        public final static Property EndTime = new Property(5, String.class, "endTime", false, "endTime");
        public final static Property RouteTransCategory = new Property(6, String.class, "routeTransCategory", false, "routeTransCategory");
        public final static Property RouteInfo = new Property(7, String.class, "routeInfo", false, "routeInfo");
        public final static Property PassengerArrayInfo = new Property(8, String.class, "passengerArrayInfo", false, "passengerArrayInfo");
        public final static Property PassengerTripId = new Property(9, String.class, "passengerTripId", false, "passengerTripId");
        public final static Property TransAmount = new Property(10, double.class, "transAmount", false, "transAmount");
    }


    public TransLogDao(DaoConfig config) {
        super(config);
    }
    
    public TransLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANS_LOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"phoneNumber\" TEXT," + // 1: phoneNumber
                "\"routeStatusCode\" TEXT," + // 2: routeStatusCode
                "\"routeStatusDesc\" TEXT," + // 3: routeStatusDesc
                "\"createTime\" TEXT," + // 4: createTime
                "\"endTime\" TEXT," + // 5: endTime
                "\"routeTransCategory\" TEXT," + // 6: routeTransCategory
                "\"routeInfo\" TEXT," + // 7: routeInfo
                "\"passengerArrayInfo\" TEXT," + // 8: passengerArrayInfo
                "\"passengerTripId\" TEXT," + // 9: passengerTripId
                "\"transAmount\" REAL NOT NULL );"); // 10: transAmount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANS_LOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TransLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(2, phoneNumber);
        }
 
        String routeStatusCode = entity.getRouteStatusCode();
        if (routeStatusCode != null) {
            stmt.bindString(3, routeStatusCode);
        }
 
        String routeStatusDesc = entity.getRouteStatusDesc();
        if (routeStatusDesc != null) {
            stmt.bindString(4, routeStatusDesc);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(5, createTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(6, endTime);
        }
 
        String routeTransCategory = entity.getRouteTransCategory();
        if (routeTransCategory != null) {
            stmt.bindString(7, routeTransCategory);
        }
 
        String routeInfo = entity.getRouteInfo();
        if (routeInfo != null) {
            stmt.bindString(8, routeInfo);
        }
 
        String passengerArrayInfo = entity.getPassengerArrayInfo();
        if (passengerArrayInfo != null) {
            stmt.bindString(9, passengerArrayInfo);
        }
 
        String passengerTripId = entity.getPassengerTripId();
        if (passengerTripId != null) {
            stmt.bindString(10, passengerTripId);
        }
        stmt.bindDouble(11, entity.getTransAmount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TransLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(2, phoneNumber);
        }
 
        String routeStatusCode = entity.getRouteStatusCode();
        if (routeStatusCode != null) {
            stmt.bindString(3, routeStatusCode);
        }
 
        String routeStatusDesc = entity.getRouteStatusDesc();
        if (routeStatusDesc != null) {
            stmt.bindString(4, routeStatusDesc);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(5, createTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(6, endTime);
        }
 
        String routeTransCategory = entity.getRouteTransCategory();
        if (routeTransCategory != null) {
            stmt.bindString(7, routeTransCategory);
        }
 
        String routeInfo = entity.getRouteInfo();
        if (routeInfo != null) {
            stmt.bindString(8, routeInfo);
        }
 
        String passengerArrayInfo = entity.getPassengerArrayInfo();
        if (passengerArrayInfo != null) {
            stmt.bindString(9, passengerArrayInfo);
        }
 
        String passengerTripId = entity.getPassengerTripId();
        if (passengerTripId != null) {
            stmt.bindString(10, passengerTripId);
        }
        stmt.bindDouble(11, entity.getTransAmount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TransLog readEntity(Cursor cursor, int offset) {
        TransLog entity = new TransLog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phoneNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // routeStatusCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // routeStatusDesc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // createTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // endTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // routeTransCategory
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // routeInfo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // passengerArrayInfo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // passengerTripId
            cursor.getDouble(offset + 10) // transAmount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TransLog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhoneNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRouteStatusCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRouteStatusDesc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEndTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRouteTransCategory(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRouteInfo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPassengerArrayInfo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPassengerTripId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTransAmount(cursor.getDouble(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TransLog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TransLog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TransLog entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
