package com.example.lib_db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.lib_db.model.RoutesLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROUTES_LOG".
*/
public class RoutesLogDao extends AbstractDao<RoutesLog, Long> {

    public static final String TABLENAME = "ROUTES_LOG";

    /**
     * Properties of entity RoutesLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PhoneNumber = new Property(1, String.class, "phoneNumber", false, "phoneNumber");
        public final static Property RoutesLogRoleCategory = new Property(2, String.class, "routesLogRoleCategory", false, "routesLogRoleCategory");
        public final static Property RoutesLogDirectionCategory = new Property(3, String.class, "routesLogDirectionCategory", false, "routesLogDirectionCategory");
        public final static Property IsFavorites = new Property(4, boolean.class, "isFavorites", false, "isFavorites");
        public final static Property RoutesEstimatedTime = new Property(5, String.class, "routesEstimatedTime", false, "routesEstimatedTime");
        public final static Property StartStationInformation = new Property(6, String.class, "startStationInformation", false, "startStationInformation");
        public final static Property EndStationInformation = new Property(7, String.class, "endStationInformation", false, "endStationInformation");
    }


    public RoutesLogDao(DaoConfig config) {
        super(config);
    }
    
    public RoutesLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROUTES_LOG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"phoneNumber\" TEXT," + // 1: phoneNumber
                "\"routesLogRoleCategory\" TEXT," + // 2: routesLogRoleCategory
                "\"routesLogDirectionCategory\" TEXT," + // 3: routesLogDirectionCategory
                "\"isFavorites\" INTEGER NOT NULL ," + // 4: isFavorites
                "\"routesEstimatedTime\" TEXT," + // 5: routesEstimatedTime
                "\"startStationInformation\" TEXT," + // 6: startStationInformation
                "\"endStationInformation\" TEXT);"); // 7: endStationInformation
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROUTES_LOG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RoutesLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(2, phoneNumber);
        }
 
        String routesLogRoleCategory = entity.getRoutesLogRoleCategory();
        if (routesLogRoleCategory != null) {
            stmt.bindString(3, routesLogRoleCategory);
        }
 
        String routesLogDirectionCategory = entity.getRoutesLogDirectionCategory();
        if (routesLogDirectionCategory != null) {
            stmt.bindString(4, routesLogDirectionCategory);
        }
        stmt.bindLong(5, entity.getIsFavorites() ? 1L: 0L);
 
        String routesEstimatedTime = entity.getRoutesEstimatedTime();
        if (routesEstimatedTime != null) {
            stmt.bindString(6, routesEstimatedTime);
        }
 
        String startStationInformation = entity.getStartStationInformation();
        if (startStationInformation != null) {
            stmt.bindString(7, startStationInformation);
        }
 
        String endStationInformation = entity.getEndStationInformation();
        if (endStationInformation != null) {
            stmt.bindString(8, endStationInformation);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RoutesLog entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(2, phoneNumber);
        }
 
        String routesLogRoleCategory = entity.getRoutesLogRoleCategory();
        if (routesLogRoleCategory != null) {
            stmt.bindString(3, routesLogRoleCategory);
        }
 
        String routesLogDirectionCategory = entity.getRoutesLogDirectionCategory();
        if (routesLogDirectionCategory != null) {
            stmt.bindString(4, routesLogDirectionCategory);
        }
        stmt.bindLong(5, entity.getIsFavorites() ? 1L: 0L);
 
        String routesEstimatedTime = entity.getRoutesEstimatedTime();
        if (routesEstimatedTime != null) {
            stmt.bindString(6, routesEstimatedTime);
        }
 
        String startStationInformation = entity.getStartStationInformation();
        if (startStationInformation != null) {
            stmt.bindString(7, startStationInformation);
        }
 
        String endStationInformation = entity.getEndStationInformation();
        if (endStationInformation != null) {
            stmt.bindString(8, endStationInformation);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RoutesLog readEntity(Cursor cursor, int offset) {
        RoutesLog entity = new RoutesLog( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phoneNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // routesLogRoleCategory
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // routesLogDirectionCategory
            cursor.getShort(offset + 4) != 0, // isFavorites
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // routesEstimatedTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // startStationInformation
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // endStationInformation
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RoutesLog entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhoneNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRoutesLogRoleCategory(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRoutesLogDirectionCategory(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsFavorites(cursor.getShort(offset + 4) != 0);
        entity.setRoutesEstimatedTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStartStationInformation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEndStationInformation(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RoutesLog entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RoutesLog entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RoutesLog entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
